[{"content":"\n\u0026lt;!--more--\u0026gt;\n\u0026lt;div style=\u0026#34;text-align:center\u0026#34;\u0026gt;\u0026lt;h2\u0026gt;~ 指尖上的故事 :radio:\u0026lt;/h2\u0026gt;\u0026lt;/div\u0026gt;\n{{\u0026lt; music auto=\u0026#34;https://music.163.com/#/playlist?id=60198\u0026#34; \u0026gt;}}\n","date":"2020-04-29","description":"","objectID":"/about/","tags":"","title":"About","uri":"/about/"},{"content":"\n### 1. 从Java中的数组谈起\n#### 1.1 使用数组\n数组：是用于储存多个相同类型数据的集合。\n定义一个数组类型的变量，使用数组类型`“类型[]”`，例如，`int[]`。和单个基本类型变量不同，数组变量初始化必须使用`new int[5]`表示创建一个可容纳5个int元素的数组。\n```Java\n// 定义长度为5的整型数组\nint[] array = new int[5];\n```\n也可以在定义数组时直接指定初始化的元素，这样就不必写出数组大小，而是由编译器自动推算数组大小。例如：\n```Java\nint[] array = new int[]{1,2,3,4,5};\n// 或\nint[] array = {1, 2, 3, 4, 5};\n```   \n要访问数组中的某一个元素，需要使用索引。数组索引从0开始，例如，5个元素的数组，索引范围是0~4。\n可以修改数组中的某一个元素，使用赋值语句，例如，`array[1] = 79;。`\n可以用数组变量`.length`获取数组大小：\n```Java\n// 定义长度为5的整型数组\nint[] array = new int[5];\nSystem.out.println(array.length);\n```\n数组是引用类型，在使用索引访问数组元素时，如果索引超出范围，运行时将报错：`java.lang.ArrayIndexOutOfBoundsException`\n```Java\n// 定义长度为5的整型数组\nint[] array = new int[5];\nSystem.out.println(array[5]);\n```    \n__Java中的数组有几个特点：__\n* 数组中的元素是有序的\n* 数组所有元素初始化为默认值，整型都是0，浮点型是0.0，布尔型是false；\n* 数组一旦创建后，类型不可改变，大小不可改变；\n* 数组元素可以是值类型（如int）或引用类型（如String），但数组本身是引用类型。   \n#### 1.2 处理数组\n##### 遍历\n数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 For-Each 循环。\n```Java\nint[] array = {1, 2, 3, 4, 5};\nfor (int i = 0; i \u0026lt; array.length; i++) {\n    System.out.println(array[i]);\n}\n```\n```Java\nint[] array = {1, 2, 3, 4, 5};\nfor (int i : array) {\n    System.out.println(i);\n}\n```\n##### 排序\n冒泡排序：\n```Java\npublic void arrayTest() {\n    int[] ns = { 28, 12, 89, 73, 65, 18, 96, 50, 8, 36 };\n    // 排序前:\n    System.out.println(Arrays.toString(ns));\n    for (int i = 0; i \u0026lt; ns.length - 1; i++) {\n        for (int j = 0; j \u0026lt; ns.length - i - 1; j++) {\n            if (ns[j] \u0026gt; ns[j+1]) {\n                // 交换ns[j]和ns[j+1]:\n                int tmp = ns[j];\n                ns[j] = ns[j+1];\n                ns[j+1] = tmp;\n            }\n        }\n    }\n    // 排序后:\n    System.out.println(Arrays.toString(ns));\n}\n```\n##### Arrays工具类\nArrays为Java中内置的专门用于处理数组的工具类，位置`java.util.Arrays`。\nArrays常用方法：\n| 方法 | 作用 | 参数 | 返回值 |\n| --- | --- | --- | --- |\n| toString | 返回指定数组内容的字符串表示形式 | `int[] a` | `String` |\n| binarySearch | 使用二分法搜索指定数组的指定值 | `int[] a, int b` | `index，查询不到返回 -1` |\n| sort | 按升序对指定数组进行排序 | `int[] a` | `排序后的数组` |\n| equals | 判断两个数组是否相等 | `int[] a, int[] b` | `boolean` |\n\n__数组再存储数组方面的弊端：__\n* 数组初始化以后，长度就不可以改变了，不便于扩展；\n* 数组中提供的属性和方法少，不便于进行添加、删除、插入等操作，且效率不高，同时无法获取存储元素的个数；\n* 数组存储的数据是有序的、可重复的；---\u0026gt;存储数据的特点单一\n* 数组只能按索引顺序存取。\n---\n### 2. Java中的集合\n#### 2.1 概览\n![集合框架图](../../static/images/basic-markdown-syntax/Collection01.gif)\n![集合框架简化图](../../static/images/basic-markdown-syntax/Collection02.jpg)   \n\n从上面的图中可以看到，Java集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合；另一个是图（Map)，存储键/值对映射。Collection接口又有三种子类型：List、Set和Queue，再下面是一些抽象类，最后是具体实现类，常用的有ArrayList、LinkedList、HashSet、LinkedHashSet、TreeSet、HashMap、LinkedHashMap、TreeMap等等。     \n\n集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含如下内容：\n* 接口：是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象\n* 实现（类）：是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。\n* 算法：是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。   \n\n除了集合，该框架也定义了几个 Map 接口和类。Map 里存储的是键/值对。尽管 Map 不是集合，但是它们完全整合在集合中。\n\n\u0026gt; _**所有集合类都位于java.util包下，支持泛型，Java集合使用统一的Iterator遍历，尽量不要使用遗留接口。**_\n\nJava的java.util包主要提供了以下三种类型的集合（Collection和Map两种体系）：\n* Collection接口：单列数据，定义了一组存取对象的方法的集合\n  * List: 元素有序、可重复的集合 ---\u0026gt; 动态数组\n  * Set: 元素无序、不可重复的集合 ---\u0026gt; 数学中的集合\n* Map接口: 双列数据，保存具有映射关系的“key-value”的集合 ---\u0026gt; 函数：y = f(x)\n\n#### 2.2 Collection接口\n* Collection接口是List、Set、和Queue接口的父接口，该接口定义的方法既可用于操作Set集合，也可用于操作List和Queue集合。\n* JDK不提供此接口的任何直接实现，而是提供更具体的子接口（如：Set和List）实现。\n* 在Java5之前，Java集合会丢失容器中所有对象的数据类型，把所有对象都当作Object类型处理；从JDK5.0增加了__泛型__以后，Java集合可以记住容器中对象的数据类型。\n##### Collection接口方法\n1. 添加  \n    * `add(Object obj)`\n    * `addAll(Collection coll) `\n2. 获取有效元素的个数\n    * `int size()`\n3. 清空集合\n    * `void clear()`\n4. 是否清空集合\n    * `boolean isEmpty()`\n5. 是否包含某个元素\n    * `boolean contains(Object obj)`:通过元素的equals方法来判断是否是同一个对象\n    * `boolean containsAll(Collection c)`:也是调用元素的equals方法来比较的。拿两个集合的元素挨个比较。\n6. 删除\n    * `boolean remove(Object obj)`:通过元素的equals方法判断是否是 要删除的那个元素。只会删除找到的第一个元素\n    * `boolean removeAll(Collection coll)`:取当前集合的差集。\n7. 取两个集合的交集\n    *  `boolean retainAll(Collection c)`：把交集的结果存在当前集合中，不 影响c \n8. 集合是否相等\n    * `boolean equals(Object obj)`\n9. 转成对象数组\n    * `Object[] toArray()`\n10. 获取集合对象的哈希值\n    * `hashCode()` \n11. 遍历\n    * `iterator()`：返回迭代器对象，用于集合遍历\n\n#### 2.3 Iterable接口\nCollection接口实现了Iterable接口，该接口有一个iterator方法，返回一个Iterator对象。\nIterator是一种抽象的数据访问模型。使用Iterator模式进行迭代的好处有：\n* 对任何集合都采用同一种访问模型；\n* 调用者对集合内部结构一无所知；\n* 集合类返回的Iterator对象知道如何迭代。   \n\nJava提供了标准的迭代器模型，即集合类实现java.util.Iterable接口，返回java.util.Iterator实例。\n```Java\n        Collection collection = new ArrayList();\n        collection.add(1);\n        collection.add(2);\n        collection.add(2);\n        collection.add(3);\n        // 使用迭代器遍历集合\n        Iterator itr = collection.iterator();\n        while(itr.hasNext()){\n            System.out.println(itr.next());\n        }\n```\n\n#### 2.4 Collection子接口之一：List接口\n在集合类中，List是最基础的一种集合：它是一种有序列表。\nList的行为和数组几乎完全相同：List内部按照放入元素的先后顺序存放，每个元素都可以通过索引确定自己的位置，List的索引和数组一样，从0开始。鉴于Java中数组用来存储数据的局限性，我们通常使用List替代数组。JDK API中List接口的实现类常用的有：ArrayList、LinkedList和Vector。\nList可以和Array相互转换。\n##### 2.4.1 List实现类","date":"2020-04-29","description":"","objectID":"/java%E9%9B%86%E5%90%88/","tags":"Java\n集合\n数组","title":"Java集合","uri":"/java%E9%9B%86%E5%90%88/"},{"content":"\n### 1. 编辑类快捷键\n| 快捷键  | 操作  |\n| ----  | ----  |\n| psvm + Tab  | 生成main方法  |\n| sout + tab  | 生成输出语句  |\n| Ctrl+X / Ctrl + Y | 删除一行  |\n| Ctrl+D  | 复制一行 |\n| Ctrl+/ 或 Ctrl+Shift+/  | 注释代码  |\n| Ctrl + Z  | 撤销 |\n| Ctrl + Shift + Z  | 取消撤销 |\n| Ctrl + C  | 复制 |\n| Ctrl + V  | 粘贴 |\n| Ctrl + O  | 重写方法 |\n| Ctrl + I  | 实现方法 |\n| Ctr + shift + U  | 大小写转化 |\n| Ctr + shift + J  | 整合两行为一行 |\n| Ctrl + Shift + space  | 自动补全代码 |\n| Alt + 回车  | 导入包，自动修正 |\n| Alt + Insert  | 生成代码(如GET,SET方法,构造函数等) |\n| Ctrl + Alt + L  | 格式化代码 |\n| Ctrl + Alt + I  | 自动缩进 |\n| Ctrl + Alt + T  | 生成try catch |\n| Ctrl + Alt + O  | 优化导入的类和包 |\n| fori  | 生成for循环for (int i = 0; i\u0026lt; ; i++) { } |\n| iter  | 生成增强for循环 |\n| itar  | 生成array for代码块 |\n| itit  | 生成iterator 迭代 |\n| itli  | 生成List的遍历 |\n| itco  | 生成Collection 迭代 |    \n\n### 2. 查找、替换类快捷键\n| 快捷键  | 操作  |\n| ----  | ----  |\n| Ctrl + F | 在当前文件中查找 |\n| Ctrl + Shift + F | 在整个项目或者指定窗口中查找文本 |\n| Ctrl + N | 在项目中查找类 |\n| Ctrl + Shift + N | 查找文件 |\n| Ctrl + Shift+R | 在指定窗口替换文本 |\n| Ctrl + W | 自动按语法选中代码 |\n| Ctrl + Shift + W | 反向自动按语法选中代码 |\n| Ctrl + G | 定位行 |\n| Ctrl＋Shift＋Backspace | 跳转到上一次编辑的位置 |\n| Ctrl + alt + ←/→ | 前后跳转编辑过的地方 |\n| Ctrl + Shift + Alt + N | 查找 变量 / 方法 |\n| Alt + F7 | 找到你的函数或者变量或者类的所有引用到的地方 |\n| Alt + F3 | 高亮显示所有该选中文本，按 Enter 选中下一个，按 Esc 高亮消失 |\n| F4 | 在当前类中查找变量的来源 |\n| Ctrl + Shift + F7 | 高亮显示所有该选中文本，按 Esc 高亮消失 |\n| 双击Shift | 查找任何内容 |\n\n### 3. 编译、运行类快捷键\n| 快捷键  | 操作  |\n| ----  | ----  |\n| Ctrl + F9  | 编译项目  |\n| Ctrl + Shift + F9 | 编译当前文件 |\n| Shift + F10 | 正常启动 |\n| Alt + Shift + F10 | 弹出 Run 的可选择菜单 |\n| Shift + F9 | debug模式启动 |\n| Alt + Shift + F9 | 选择 Debug |\n\n### 4. Debug快捷键\n| 快捷键  | 操作  |\n| ---- | ----  |\n| Shift + F7  | 智能步入 |\n| Alt + Shift + F7 | 强制步入 |\n| F8 | 在 Debug 模式下，步过，如果当前行断点是一个方法，则不进入当前方法体内 |\n| Shift + F8 | 步出 |\n| Alt + Shift + F8  | 强制步过 |\n| alt + F8 | 在 Debug 模式下，选中查看值 |\n| Ctrl + Shift + F8  | 查看断点 |\n| F9 | 在 Debug 模式下，恢复程序运行。如果该断点下面代码还有断点则停在下一个断点上 |\n| Alt +F9 | 运行至光标的位置 |\n| Ctrl + Alt+ F9  | 强制运行至光标处 |\n| Alt + F10 | 定位到断点 |\n| F7  | \u0026lt;sapn style=\u0026#34;font-size:10px\u0026#34;\u0026gt;在 Debug 模式下，步入，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中\u0026lt;/span\u0026gt; |\n\n\n### 5. 重构快捷键\n| 快捷键  | 操作  |\n| ----  | ----  |\n| Ctrl + F6 | 重构方法 |\n| Shift + F6 | 重命名 |\n| Ctrl + Alt + C | 抽取常量 |\n| Ctrl + Alt + F | 抽取字段 |\n| Ctrl + Alt + M | 抽取方法 |\n| Ctrl + Alt + P | 抽取参数 |\n| Ctrl + Alt + V | 抽取变量 |\n\n### 6. 其他类快捷键\n| 快捷键  | 操作  |\n| ----  | ----  |\n| Ctrl + C | 复制文件名 |\n| Ctrl + Shift + C | 复制文件的完整路径 |\n| Ctrl + E | 显示最近打开的文件 |\n| Ctrl + Shift + E | 显示最近修改的文件列表的弹出层 |\n| Ctrl + P | 方法参数提示 |\n| Ctrl + Q | 可以看到当前方法的声明 |\n| Ctrl + Alt + Space | 类名或接口名提示 |\n| Ctrl + F12 | 显示当前文件的结构 |\n| Ctrl + H | 显示当前类的结构图 |\n| Ctrl + Q | 显示注释文档信息 |\n| 连按两次Shift | 弹出 Search Everywhere 弹出层，查找内容 |\n| Ctrl + [ | 移动光标到当前所在代码的花括号开始位置 |\n| Ctrl + ] | 移动光标到当前所在代码的花括号结束位置 |\n| Ctrl + K | 版本控制提交项目，需要此项目有加入到版本控制才能够使用 |\n| Ctrl + T | 版本控制更新项目，需要此项目有加入到版本控制才能够使用 |\n| Ctrl + Tab | 切换编辑窗口。如果在切换的过程又按Delete键，则是关闭对应选中的窗口 |\n","date":"2020-04-29","description":"","objectID":"/idea%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%80%BB%E7%BB%93/","tags":"IDEA\n快捷键\n效率","title":"IDEA快捷键总结","uri":"/idea%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%80%BB%E7%BB%93/"}]